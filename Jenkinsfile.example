// 导入共享库
@Library('jenkins_share_library') _

// 定义引用的内容
def notify = new fdisk.devops.notify()
def build = new fdisk.devops.build()

// 定义变量
def git_url = '<your git address>'
def jenkins_credential_id = '<your jenkins credential_id, for checkout code from git>'

pipeline {
    agent {
        label "master"
    }

    // build options
    options {
        // 显示时间戳
        timestamps()
        // 构建超时时间为30min
        timeout(time: 30, unit: 'MINUTES')
        // 不允许并发构建
        disableConcurrentBuilds()
        // 保留最近30个构建
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '30')
    }

    // Git Parameter Plug-In (让用户选择指定的上线分支)
    parameters {
        gitParameter branch: '', branchFilter: '.*', defaultValue: '', description: 'branch name', name: 'branch', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*', type: 'PT_BRANCH', useRepository: "${git_url}"
    }
    
    stages {
        // 此步为必须，需要加入到你的pipline中，否则无法获取用户信息
        stage('get build user') {
            steps {
                script {
                    log.Message("get build user")
                    build.GetBuildUser()
                }
            }
        }
        stage('checkout code') {
            steps {
                script {
                    branch = build.GetBranch("${branch}")
                    log.Message("checkout code from ${git_url}, branch: ${branch}")
                    build.CheckoutCodeFromGit("${git_url}", "${branch}", "${jenkins_credential_id}")
                }
            }
        }
    }
    
    post {
        always {
            script {
                // 用于发送钉钉上线通知
                notify.DingTalkRobot('/usr/local/pyenv/shims/python3', '/opt/scripts/jenkins_dingdingrobot.py')
                // 用于发送微信机器人上线通知
                notify.WechatRobot('/usr/local/pyenv/shims/python3', '/opt/scripts/jenkins_wechatrobot.py')
            }
            
        }
    }
}