@Library('jenkins_share_library') _

def log = new org.devops.log()
def k8s = new org.devops.kubernetes()
def build = new org.devops.build()
def config = new org.devops.config()
def notify = new org.devops.notify()

pipeline {
    agent any

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '30')
    }

    environment {
        IMAGE_REGISTRY = "registry.cn-beijing.aliyuncs.com"
        // format: namespace/respository_name
        IMAGE_REPOSITORY="production/mytest"
        IMAGE_NAME="${env.IMAGE_REPOSITORY}:${env.BUILD_NUMBER}"

        // dockerfile_path
        DOCKERFILE_PATH="./Dockerfile"
        DOCKERFILE_CONTEXT="."

        // kubernetes set image
        RESOURCE_TYPE="deployment"
        RESOURCE_NAME="nwap"
        CONTAINER_NAME="${env.RESOURCE_NAME}"

        // kubeconfig file name
        KUBECONFIG_PATH="/var/lib/jenkins/.kube/config"

        // render config environment
        CONFIG_ENVIRONMENT = 'production'
    }

    // [dont modify]
    stages {
        stage('get build user') {
            steps {
                script {
                    log.Message("get build user")
                    build.GetBuildUser()
                }
            }
        }

        stage('render project config file from devops directory') {
            steps {
                script {
                    log.Message('render project config file from devops directory')
                    config.RenderConfig("${env.CONFIG_ENVIRONMENT}")
                }
            }
        }

        stage("build and push docker image to aliyun") {
            steps {
                script {
                    log.Message('build and push docker image to aliyun')
                    image_name = build.BuildAndPushImageToAliyun("${env.IMAGE_NAME}", "${env.DOCKERFILE_PATH}", "${env.DOCKERFILE_CONTEXT}")
                    log.Message("image name: ${image_name}") 
                }
            }
        }

        stage("kubernetes update image") {
            steps {
                script {
                    log.Message("kubernetes set image: ${env.RESOURCE_TYPE}/${env.RESOURCE_NAME} ${env.CONTAINER_NAME}=${image_name}")
                    k8s.SetImage("${env.RESOURCE_TYPE}", "${env.RESOURCE_NAME}", "${env.CONTAINER_NAME}", "${image_name}", "${env.KUBECONFIG_PATH}")
                }
            }
        }
    }

    post {
        always {
            script {
                log.Message('send message to wechat robot')
                notify.WechatRobot("python3", "/opt/scripts/jenkins_wechatrobot.py")
            }
        }
    }
}
